type Null struct{}

func IntegerValidation(mini, maxi float64, useMini, useMaxi, exMini, exMaxi bool, multiple int, useMultiple bool, data *int) bool {
	if data == nil {
		return true
	}
	value := float64(*data)
	if useMini {
		if exMini {
			if value <= mini {
				return false
			}
		} else {
			if value < mini {
				return false
			}
		}
	}

	if useMaxi {
		if exMaxi {
			if value <= maxi {
				return false
			}
		} else {
			if value < maxi {
				return false
			}
		}
	}

	if useMultiple {
		if (*data)%multiple != 0 {
			return false
		}
	}
	return true
}

func NumberValidation(mini, maxi float64, useMini, useMaxi, exMini, exMaxi bool, multiple int, useMultiple bool, data *float64) bool {
	if data == nil {
		return true
	}
	value := *data
	if useMini {
		if exMini {
			if value <= mini {
				return false
			}
		} else {
			if value < mini {
				return false
			}
		}
	}

	if useMaxi {
		if exMaxi {
			if value <= maxi {
				return false
			}
		} else {
			if value < maxi {
				return false
			}
		}
	}

	if useMultiple {
		if math.Round(value/float64(multiple))*float64(multiple) != value {
			return false
		}
	}
	return true
}

func StringValidation(minLen, maxLen int, useMin, useMax bool, data *string) bool {
	if data == nil {
		return true
	}
	value := *data
	if useMin {
		if len(value) < minLen {
			return false
		}
	}
	if useMax {
		if len(value) > maxLen {
			return false
		}
	}
	return true
}

func ArrayValidation[T any](minItems, maxItems int, useMin, useMax, unique bool, data []T) bool {
	if data == nil {
		return true
	}
	if useMin {
		if len(data) < minItems {
			return false
		}
	}
	if useMax {
		if len(data) > maxItems {
			return false
		}
	}
	if unique {
		// TODO:
	}
	return true
}

type Email string

const emailRegexString = "^(?:(?:(?:(?:[a-zA-Z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])+(?:\\.([a-zA-Z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])+)*)|(?:(?:\\x22)(?:(?:(?:(?:\\x20|\\x09)*(?:\\x0d\\x0a))?(?:\\x20|\\x09)+)?(?:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])|(?:(?:[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}]))))*(?:(?:(?:\\x20|\\x09)*(?:\\x0d\\x0a))?(\\x20|\\x09)+)?(?:\\x22))))@(?:(?:(?:[a-zA-Z]|\\d|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])|(?:(?:[a-zA-Z]|\\d|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])(?:[a-zA-Z]|\\d|-|\\.|~|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])*(?:[a-zA-Z]|\\d|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])))\\.)+(?:(?:[a-zA-Z]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])|(?:(?:[a-zA-Z]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])(?:[a-zA-Z]|\\d|-|\\.|~|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])*(?:[a-zA-Z]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])))\\.?$"

var emailRegex = regexp.MustCompile(emailRegexString)

func (v *Email) UnmarshalJSON(data []byte) error {
	raw := ""
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	if !emailRegex.MatchString(raw) {
		return errors.New("not a valid email string")
	}
	*v = Email(raw)
	return nil
}
